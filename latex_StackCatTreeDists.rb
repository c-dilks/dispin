#!/usr/bin/env ruby
# generate latex image markup for StackCatTreeDists

# var list: the order here determines order of images
vars = [
  "Mh",
  "X",
  "Z",
  "Q2",
  "PhPerp",
  "XF",
  "PhiH",
  "PhiR",
  # "PhiD",
  "Theta",
  "Depol2",
  "Depol3",
  "Mmiss",
  # "DYsgn",
]

titles = {
  "Mh"     => "$M_{h}$",
  "X"      => "$x$",
  "Z"      => "$z$",
  "Q2"     => "$Q^{2}$",
  "PhPerp" => "$\\pt$",
  "PhiH"   => "$\\phih$",
  "PhiR"   => "$\\phir$",
  "PhiD"   => "$\\Delta\\phi$",
  "Theta"  => "$\\theta$",
  "Depol2" => "$K_2$",
  "Depol3" => "$K_3$",
  "Mmiss"  => "$M_X$",
  "XF"     => "$x_F$",
  "DYsgn"  => "$\\Delta Y$",
}

tori = [
  "inbending",
  "outbending",
  "bibending",
]

outN = "stack.tex"
out = File.open(outN,"w")
out.puts "%%%%% latex generated by #{$0} %%%%%"
row = 0
latexVars = []
NumRows = 3
vars.each do |var|

  # header
  if row%NumRows==0
    out.puts "\\begin{figure}[p]"
    out.puts "\\centering"
    latexVars.clear
  end

  # include graphics
  tori.each do |torus|
    out.puts "\\includegraphics[width=0.32\\textwidth]{img/stack/#{torus}/#{var}.png}"
  end
  latexVars << titles[var]

  # caption, label, footer
  if row%NumRows==NumRows-1 or row==vars.length-1
    if latexVars.length>2
      latexVars[-1] = "and #{latexVars.last}"
      latexVarsStr = latexVars.join(', ')
    else
      latexVarsStr = latexVars.join(' and ')
    end
    caption = "Comparisons of #{latexVarsStr} for inbending (left), outbending (middle), and the combined inbending and outbending data sets (right)."
    caption += " Light red closed circles are for RGA, and dark blue closed squares are for RGB."
    caption += " The magenta open circles denote MC data."#+"; for the combined inbending and outbending set, two MC sets are shown separately for RGA and RGB, with corresponding markers and colors."
    caption += " The distributions are normalized by their respective dihadron yields."
    out.puts "\\caption{#{caption}}"
    out.puts "\\label{fig:stack:#{var}}"
    out.puts "\\end{figure}"
  end
  row += 1
end
out.puts "%%%%% end generated latex %%%%%"
out.close
puts "wrote #{outN}"
