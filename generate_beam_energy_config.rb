#!/usr/bin/env ruby
require './DatasetLooper.rb'

# generates `src/BeamEnergyTable.{cxx,h}` using `get_beam_energy.groovy`

dihadronTok = :none
looper = DatasetLooper.new dihadronTok

RUNLIST_FILE = 'tmp/runlist'
OUTPUT_BASE  = 'tmp/BeamEnergyTable'
DISCLAIMER   = "// THIS FILE WAS GENERATED BY #{__FILE__}, which used RCDB to get the beam energies"
File.open(RUNLIST_FILE, 'w') do |out|
  runnum_list = []
  looper.datasetListLoopOnlyData do |dataset|
    runnum_list += Dir.glob("outroot.#{dataset}/*.root")
      .map{ |name| File.basename name }
      .map{ |name| name.gsub /^.*_/, '' }
      .map{ |name| name.gsub /\..*$/, '' }
      .map(&:to_i)
  end
  runnum_list.sort.each do |runnum|
    out.puts runnum
  end
end

File.open(OUTPUT_BASE + '.h', 'w') do |out|
  out.puts """#{DISCLAIMER}
\#ifndef BEAMENERGYTABLE_H_GUARD
\#define BEAMENERGYTABLE_H_GUARD

\#include <map>

class BeamEnergyTable {
  public:
    static std::map<int,float> const table;
};

\#endif"""
end

File.open(OUTPUT_BASE + '.cxx', 'w') do |out|
  out.puts """#{DISCLAIMER}

\#include \"BeamEnergyTable.h\"

std::map<int,float> const BeamEnergyTable::table = {"""
  result = `run-groovy get_beam_energy.groovy #{RUNLIST_FILE}`
  raise 'get_beam_energy.groovy failed' unless $?.success?
  table = result
    .split("\n")
    .map(&:chomp)
    .reject{ |row| row.empty? or row.include?('*') or row.include?('COATJAVA') }
  table.each_with_index do |row, i|
    trailing_comma = i+1<table.length ? ',' : ''
    out.puts "  { #{row.gsub(/ /, ', ')} }#{trailing_comma}"
  end
  out.puts '};'
end

['.h','.cxx'].each{ |ext| puts "generated #{OUTPUT_BASE}#{ext}" }
